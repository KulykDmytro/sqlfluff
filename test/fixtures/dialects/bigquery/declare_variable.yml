# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 5ae2fb6a2f36564e047503b99940dfec48aad60e62b71f6db4385e7a43259319
file:
- statement:
    declare_segment:
      keyword: declare
      identifier: var1
      data_type:
        data_type_identifier: int64
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var1
    - comma: ','
    - identifier: var2
    - data_type:
        data_type_identifier: string
- statement_terminator: ;
- statement:
    declare_segment:
      keyword: declare
      identifier: arr1
      data_type:
        keyword: array
        start_angle_bracket: <
        data_type:
          data_type_identifier: string
        end_angle_bracket: '>'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var1
    - keyword: default
    - literal: "'value'"
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var1
    - keyword: default
    - array_literal:
      - start_square_bracket: '['
      - expression:
          literal: "'one'"
      - comma: ','
      - expression:
          literal: "'two'"
      - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: arr1
    - data_type:
        keyword: array
        start_angle_bracket: <
        data_type:
          data_type_identifier: string
        end_angle_bracket: '>'
    - keyword: default
    - array_literal:
      - start_square_bracket: '['
      - expression:
          literal: "'one'"
      - comma: ','
      - expression:
          literal: "'two'"
      - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: str1
    - data_type:
      - keyword: struct
      - start_angle_bracket: <
      - parameter: f1
      - data_type:
          data_type_identifier: string
      - comma: ','
      - parameter: f2
      - data_type:
          data_type_identifier: string
      - end_angle_bracket: '>'
    - keyword: default
    - tuple:
        bracketed:
        - start_bracket: (
        - literal: "'one'"
        - comma: ','
        - literal: "'two'"
        - end_bracket: )
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: str1
    - data_type:
      - keyword: struct
      - start_angle_bracket: <
      - parameter: f1
      - data_type:
          data_type_identifier: string
      - comma: ','
      - parameter: f2
      - data_type:
          data_type_identifier: string
      - end_angle_bracket: '>'
    - keyword: default
    - typeless_struct:
        keyword: struct
        bracketed:
        - start_bracket: (
        - literal: "'one'"
        - comma: ','
        - literal: "'two'"
        - end_bracket: )
- statement_terminator: ;
